mern-workflow
kicker is JavaScript application using the MERN stack (Mongo, Express.js, React.js & Redux.js, and NodeJS).

Getting Started 


Firstly, you can fork or clone this project.

  git clone https://github.com/ADN-HACKERS/kicker.git 
  
Run in development:

  npm install
  npm start

Adding Custom Environment Variables:
These environment variables will be defined for you on process.env. We , have an environment variable named REACT_APP_API_URL will be exposed in your JS as process.env.REACT_APP_API_URL.

Updating to New Releases

Create React App is divided into two packages:

create-react-app is a global command-line utility that you use to create new projects.
react-scripts is a development dependency in the generated projects (including this one).
You almost never need to update create-react-app itself: it delegates all the setup to react-scripts.

When you run create-react-app, it always creates the project with the latest version of react-scripts so you’ll get all the new features and improvements in newly created apps automatically.

To update an existing project to a new version of react-scripts, open the changelog, find the version you’re currently on (check package.json in this folder if you’re not sure), and apply the migration instructions for the newer versions.

In most cases bumping the react-scripts version in package.json and running npm install in this folder should be enough, but it’s good to consult the changelog for potential breaking changes.

We commit to keeping the breaking changes minimal so you can upgrade react-scripts painlessly.

Importing a Component

This project setup supports ES6 modules thanks to Babel.
While you can still use require() and module.exports, we encourage you to use import and export instead.

For example:

SignInForm.js
import React, { Component } from 'react';

const SignInForm =()={
return()
}
  

export default Login; //

SignUpForm.js
import React, { Component } from 'react';

const SignUpForm =()={
return()
}
  

export default Login; //

